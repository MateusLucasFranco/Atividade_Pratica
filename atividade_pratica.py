# -*- coding: utf-8 -*-
"""Atividade_Pratica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f92hRIhUtMJ-ApVL8WqQ6hgEhRMntmo1

Mateus Lucas Franco - 202010520

Gustavo Lima Carvalho - 202010404

1. Crie uma função em python que seja capaz de utilizar a API do Yahoo finance para baixar os dados históricos diários das ações da Petrobras (código PETR4)
e salvar esses dados como um arquivo .csv
"""

import yfinance as yf
import pandas as pd

def baixar_dados_historicos(codigo):
    # Baixar dados históricos da ação
    acao = yf.Ticker(codigo)
    dados = acao.history(period="max")

    # Salvar dados em um arquivo CSV
    nome_arquivo = f"{codigo}_historico.csv"
    dados.to_csv(nome_arquivo)

    print(f"Dados históricos salvos em {nome_arquivo}")

# Exemplo de uso da função
codigo_acao = "PETR4.SA"  # Código da ação da Petrobras na B3
baixar_dados_historicos(codigo_acao)

"""2. Crie uma função em python que receba um nome de arquivo .csv, carregue o conteúdo do arquivo e retorne um dataframe contendo o valor do arquivo. A partir dessa função, carregue o conteúdo do arquivo .csv da questão 1 (acima) e imprima o conteúdo das últimas 10 linhas."""

import pandas as pd

def carregar_csv(nome_arquivo):
    # Carregar conteúdo do arquivo CSV em um DataFrame
    dataframe = pd.read_csv(nome_arquivo)

    return dataframe

# Exemplo de uso da função
nome_arquivo = "PETR4.SA_historico.csv"  # Nome do arquivo CSV
dados_dataframe = carregar_csv(nome_arquivo)

# Imprimir as últimas 10 linhas do DataFrame
ultimas_10_linhas = dados_dataframe.tail(10)
print(ultimas_10_linhas)

"""3. Crie uma função que receba como entrada (parâmetros) um dataframe e o nome de uma de suas colunas e retorne a média e o desvio padrão dos valores contidos na coluna cujo nome foi recebido como parâmetro."""

import pandas as pd

def calcular_estatisticas(dataframe, nome_coluna):
    # Obter a coluna do DataFrame
    coluna = dataframe[nome_coluna]

    # Calcular média e desvio padrão
    media = coluna.mean()
    desvio_padrao = coluna.std()

    return media, desvio_padrao

# Exemplo de uso da função
dados_dataframe = carregar_csv("PETR4.SA_historico.csv")  # Carregar DataFrame a partir do arquivo CSV

# Calcular média e desvio padrão da coluna "Close"
coluna_nome = "Close"  # Nome da coluna
media, desvio_padrao = calcular_estatisticas(dados_dataframe, coluna_nome)

# Imprimir média e desvio padrão
print(f"Média de {coluna_nome}: {media}")
print(f"Desvio padrão de {coluna_nome}: {desvio_padrao}")

"""4. Crie uma função que receba como entrada (parâmetros) um dataframe onde cada coluna possui uma série de números. A função deve receber também o nome de uma das colunas. A função deve retornar um dataframe resultante, a partir do dataframe de entrada, onde as linhas foram ordenadas em ordem crescente pelos números da coluna cujo nome foi recebido como parâmetro.

"""

import pandas as pd

def ordenar_dataframe(dataframe, nome_coluna):
    # Ordenar o DataFrame com base nos valores da coluna especificada
    dataframe_ordenado = dataframe.sort_values(by=nome_coluna)

    return dataframe_ordenado

# Exemplo de uso da função
dados_dataframe = carregar_csv("PETR4.SA_historico.csv")  # Carregar DataFrame a partir do arquivo CSV

# Ordenar o DataFrame pelo valor da coluna "Close"
coluna_nome = "Close"  # Nome da coluna
dados_ordenados = ordenar_dataframe(dados_dataframe, coluna_nome)

# Imprimir DataFrame ordenado
print(dados_ordenados)